package xiangshan.backend.decode.isa.predecode

import chisel3.util._
import xiangshan.frontend.BrType

object PreDecodeInst {
  // def const
  def T = true.B
  def F = false.B

  // def C_JAL     = BitPat("b????????????????_?01_?_??_???_??_???_01") // RV32C
  def C_J       = BitPat("b????????????????_101_?_??_???_??_???_01")
  def C_JALR    = BitPat("b????????????????_100_?_??_???_00_000_10")  //c.jalr & c.jr
  def C_BRANCH  = BitPat("b????????????????_11?_?_??_???_??_???_01")
  def JAL       = BitPat("b????????????????_???_?????_1101111")
  def JALR      = BitPat("b????????????????_000_?????_1100111")
  def BRANCH    = BitPat("b????????????????_???_?????_1100011")

  //sfb shadowable instruction
  def SLLI    = if (XLEN == 32) BitPat("b0000000?????_?????_001_?????_0010011")
                           else BitPat("b000000??????_?????_001_?????_0010011")
  def SRLI    = if (XLEN == 32) BitPat("b0000000?????_?????_101_?????_0010011")
                           else BitPat("b000000??????_?????_101_?????_0010011")
  def SRAI    = if (XLEN == 32) BitPat("b0100000?????_?????_101_?????_0010011")
                           else BitPat("b010000??????_?????_101_?????_0010011")

  def ADDIW   = BitPat("b???????_?????_?????_000_?????_0011011")
  def SLLIW   = BitPat("b0000000_?????_?????_001_?????_0011011")
  def SRLIW   = BitPat("b0000000_?????_?????_101_?????_0011011")
  def SRAIW   = BitPat("b0100000_?????_?????_101_?????_0011011")

  def SLLW    = BitPat("b0000000_?????_?????_001_?????_0111011")
  def SRLW    = BitPat("b0000000_?????_?????_101_?????_0111011")
  def SRAW    = BitPat("b0100000_?????_?????_101_?????_0111011")
  def ADDW    = BitPat("b0000000_?????_?????_000_?????_0111011")
  def SUBW    = BitPat("b0100000_?????_?????_000_?????_0111011")

  def LUI     = BitPat("b????????????????????_?????_0110111")


  def ADDI    = BitPat("b????????????_?????_000_?????_0010011")
  def SLTI    = BitPat("b????????????_?????_010_?????_0010011")
  def SLTIU   = BitPat("b????????????_?????_011_?????_0010011")
  def XORI    = BitPat("b????????????_?????_100_?????_0010011")
  def ORI     = BitPat("b????????????_?????_110_?????_0010011")
  def ANDI    = BitPat("b????????????_?????_111_?????_0010011")

  def ADD     = BitPat("b0000000_?????_?????_000_?????_0110011")
  def SLL     = BitPat("b0000000_?????_?????_001_?????_0110011")
  def SLT     = BitPat("b0000000_?????_?????_010_?????_0110011")
  def SLTU    = BitPat("b0000000_?????_?????_011_?????_0110011")
  def XOR     = BitPat("b0000000_?????_?????_100_?????_0110011")
  def SRL     = BitPat("b0000000_?????_?????_101_?????_0110011")
  def OR      = BitPat("b0000000_?????_?????_110_?????_0110011")
  def AND     = BitPat("b0000000_?????_?????_111_?????_0110011")
  def SUB     = BitPat("b0100000_?????_?????_000_?????_0110011")
  def SRA     = BitPat("b0100000_?????_?????_101_?????_0110011")


  val brTable = Array(
    // C_JAL     -> List(BrType.jal),
    C_J       -> List(BrType.jal),
    C_JALR    -> List(BrType.jalr),
    C_BRANCH  -> List(BrType.branch),
    JAL       -> List(BrType.jal),
    JALR      -> List(BrType.jalr),
    BRANCH    -> List(BrType.branch)
  )

  val sfbTable = Array(
///                       shadowable
///                       |   has_rs2
///                       |   |
///                       |   |
      SLLI        -> List(Y, N),
      SRLI        -> List(Y, N),
      SRAI        -> List(Y, N),

      ADDIW       -> List(Y, N),
      SLLIW       -> List(Y, N),
      SRAIW       -> List(Y, N),
      SRLIW       -> List(Y, N),

      ADDW        -> List(Y, Y),
      SUBW        -> List(Y, Y),
      SLLW        -> List(Y, Y),
      SRAW        -> List(Y, Y),
      SRLW        -> List(Y, Y),

      LUI         -> List(Y, N),

      ADDI        -> List(Y, N),
      ANDI        -> List(Y, N),
      ORI         -> List(Y, N),
      XORI        -> List(Y, N),
      SLTI        -> List(Y, N),
      SLTIU       -> List(Y, N),

      SLL         -> List(Y, Y),
      ADD         -> List(Y, Y),
      SUB         -> List(Y, Y),
      SLT         -> List(Y, Y),
      SLTU        -> List(Y, Y),
      AND         -> List(Y, Y),
      OR          -> List(Y, Y),
      XOR         -> List(Y, Y),
      SRA         -> List(Y, Y),
      SRL         -> List(Y, Y)  
  )
}
